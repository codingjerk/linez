#!/usr/bin/env python

import sys
import argparse
import shutil
import os
import atexit
import math

def line(percentage, maxlength, mode):
    value = maxlength * min(1.0, percentage)
    full = int(value)
    reminder = value - full

    full_string = '\u2588' * full
    remid = round(reminder * 8)

    if mode == 'h':
        reminder_string = ['', '\u258F', '\u258E', '\u258D', '\u258C', '\u258B', '\u258A', '\u2589', '\u2588'][remid]
        fill = ' ' * (maxlength - len(full_string) - len(reminder_string))
        return full_string + reminder_string + fill
    
    if mode == 'v':
        reminder_string = ['', '\u2581', '\u2582', '\u2583', '\u2584', '\u2585', '\u2586', '\u2587', '\u2588'][remid]
        fill = ' ' * (maxlength - len(full_string) - len(reminder_string))
        return fill + reminder_string + full_string

    raise Exception()

def colorize(line, mode, colors, colormode):
    color_codes = {
        'black'   : '\033[0;%dm' % 30,
        'red'     : '\033[0;%dm' % 31,
        'green'   : '\033[0;%dm' % 32,
        'yellow'  : '\033[0;%dm' % 33,
        'blue'    : '\033[0;%dm' % 34,
        'magenta' : '\033[0;%dm' % 35,
        'cyan'    : '\033[0;%dm' % 36,
        'lgray'   : '\033[0;%dm' % 37,
        'default' : '\033[0;%dm' % 39,

        'dgray'   : '\033[0;%dm' % 90,
        'lred'    : '\033[0;%dm' % 91,
        'lgreen'  : '\033[0;%dm' % 92,
        'lyellow' : '\033[0;%dm' % 93,
        'lblue'   : '\033[0;%dm' % 94,
        'lmagenta': '\033[0;%dm' % 95,
        'lcyan'   : '\033[0;%dm' % 96,
        'white'   : '\033[0;%dm' % 97,
    }

    reset_color = '\033[0m'

    result = []
    iterated = enumerate(line if mode == 'h' else reversed(line))
    for i, c in iterated:
        char = []
        p = i / len(line) if colormode == 'sections' else len(line.strip()) / len(line)
        for pair in colors:
            color, value = pair
            if p < value:
                char.append(color_codes[color])
                break

        char.append(c)
        char.append(reset_color)

        result.append(''.join(char))

    return result if mode == 'h' else list(reversed(result))

def makeline(percentage, maxlength, mode, colors, colormode):
    l = line(percentage, maxlength, mode)
    c = colorize(l, mode, colors, colormode)

    return c

def drawlines(lines, mode, linewidth, sepwidth, values, print_values, header):
    if len(lines) == 0: return
    
    if mode == 'h':
        text = header + '\n' * (sepwidth)
        rows = []
        for i, line in enumerate(lines):
            row = ''
            for _ in range(linewidth):
                if print_values:
                    if _ == 0:
                        row += '%6.1f ' % values[i]
                    else:
                        row += ' ' * 7

                row += ''.join(line) + '\n'

            rows.append(row)

        text += ('\n' * sepwidth).join(rows)

        sys.stdout.write(text)
        sys.stdout.flush()

        height = linewidth * len(lines) + sepwidth * (len(lines) - 1) + len(header.split('\n'))

        sys.stdout.write('\033[%dA' % height)
    elif mode == 'v':
        length = len(lines[0])

        rows = []
        for i in range(length):
            row = ''
            for line in lines:
                row += ' ' * sepwidth + line[i] * linewidth

            rows.append(row)

        text = '\n' * (sepwidth + 1) + '\n'.join(rows)

        sys.stdout.write(text)
        sys.stdout.flush()

        height = length
    
        sys.stdout.write('\033[%dA' % height)
    else:
        raise Exception()

def get_values(linecount):
    return [float(sys.stdin.readline()) for _ in range(linecount)]

def scale_values(values, scale, cut):
    return [(v - cut) / scale for v in values]

def makelines(values, maxlength, mode, colors, colormode):
    return [makeline(value, maxlength, mode, colors, colormode) for value in values]

def smooth_values(values1, values2, k):
    return [v1 * k + v2 * (1 - k) for v1, v2 in zip(values1, values2)]

def update_colors(args):
    args.ccolors = []
    for color in args.colors.split(','):
        if ':' not in color:
            args.ccolors.append((color, 1.0))
        else:
            [color, value] = color.split(':')
            value = (float(value) - args.cut) / args.scale
            args.ccolors.append((color, value))

def centrate(text, width):
    center = width // 2
    textcenter = len(text) // 2

    leftpadding = center - textcenter
    rightpadding = width - leftpadding - len(text)

    return ' ' * leftpadding + text + ' ' * rightpadding

def get_terminal_size():
    return shutil.get_terminal_size((80, 20))

def calculate_size(args):
    twidth, theight = get_terminal_size()
    if args.auto_linelength and args.mode == 'h':
        args.maxlength = twidth
        if args.print:
            args.maxlength -= 7

    if args.auto_linelength and args.mode == 'v':
        args.maxlength = theight

    args.cheader = ''
    if len(args.header) > 0:
        args.cheader = '\n' + centrate(args.header, twidth) + '\n'

def parse_arguments():
    parser = argparse.ArgumentParser(description='Prints input values as lines.')
    parser.add_argument('--linecount', '-c', default=1, type=int, help='lines count')
    parser.add_argument('--maxlength', '-m', default=40, type=int, help='line length')
    parser.add_argument('--linewidth', '-W', default=1, type=int, help='line width')
    parser.add_argument('--sepwidth',  '-w', default=1, type=int, help='separator width')
    parser.add_argument('--mode',      '-M', default='h', type=str, help='v for vertical and h for horizontal mode')
    parser.add_argument('--scale',     '-s', default=1, type=float, help='divider for input values')
    parser.add_argument('--cut',       '-C', default=0, type=float, help='subtractor for input values')
    parser.add_argument('--print',     '-p', action='store_true', help='print value for each line (in horizontal mode only)')

    parser.add_argument('--auto-linelength', '-a', action='store_true', help='detecting terminal size to set line length automaticaly')
    parser.add_argument('--auto-scale-cut', '-A', action='store_true', help='tuning scale and cut automaticaly')
    parser.add_argument('--noupdate-colors', '-N', action='store_true', help='disabling color-table updating for scale-cut tuning')
    parser.add_argument('--auto-linewidth', action='store_true', help='detecting terminal size to set line width automaticaly')

    parser.add_argument('--header',      '-H', default='', type=str, help='print custom header')
    parser.add_argument('--colors', default='green', type=str, help='one color: green, red, blue, etc., multiple colors: green:0.3,yellow:0.6,red')
    parser.add_argument('--colormode', default='sections', type=str, help='sections for multicolored lines and full for fully colored')

    parser.add_argument('--smoothness', '-S', default=0.5, type=float, help='from 0 to 1, controls how values must depend on old ones')

    args = parser.parse_args()

    calculate_size(args)

    args.scale -= args.cut

    update_colors(args)
    if args.auto_linewidth:
        update_linewidth(args)

    return args

min_value = math.inf
max_value = -math.inf
def update_scale_cut(args, values):
    global min_value, max_value

    for v in values:
        min_value = min(min_value, v)
        max_value = max(max_value, v)

    args.cut = min_value
    args.scale = max_value - args.cut

def update_linewidth(args):
    w, h = get_terminal_size()

    if args.mode == 'h':
        header_size = len(args.cheader.split('\n'))
        separators = args.linecount * args.sepwidth
        free_space = h - header_size - separators
        args.linewidth = free_space // args.linecount

def process_cycle(args):
    old_values = None
    old_size = get_terminal_size()

    while True:
        current_size = get_terminal_size()
        if old_size != current_size:
            print('\n' * 100)
            os.system('clear')
            calculate_size(args)
            old_size = current_size

            if args.auto_linewidth:
                update_linewidth(args)

        originals = get_values(args.linecount)
        if args.auto_scale_cut:
            update_scale_cut(args, originals)
            if not args.noupdate_colors:
                update_colors(args)

        values = scale_values(originals, args.scale, args.cut)
        # TODO: update only if needed
        if old_values is None: old_values = values

        values = smooth_values(values, old_values, args.smoothness)
        lines = makelines(values, args.maxlength, args.mode, args.ccolors, args.colormode)
        drawlines(lines, args.mode, args.linewidth, args.sepwidth, originals, args.print, args.cheader)

        old_values = values

def init():
    os.system('setterm -cursor off')
    os.system('setterm -blank 0')
    os.system('clear')

def exit():
    os.system('clear')
    os.system('setterm -cursor on')
    os.system('setterm -blank 10')

def wrap(init, work, exit):
    init()
    try:
        work()
    except (ValueError, KeyboardInterrupt):
        pass
    except Exception as e:
        print(e)
    
    exit()

# TODO: add cusmot titles for each line
# TODO: add continious mode
def main():
    args = parse_arguments()
    wrap(init, lambda: process_cycle(args), exit)

if __name__ == "__main__":
    main()

